{"version":3,"sources":["../dist-esnext/userRepository.js"],"names":["createUserRepository","curry","collectionName","url","db","collection","save","getByIds","find","getById","getDbCollection","getOtherUsersWithSameUserNameOrEmail","getByUserNameOrEmail","user","query","_id","$ne","id","$or","email","userName","select","toArray","userNameOrEmail","findOne"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AACO,IAAMA,sDAAuB,gBAAEC,KAAF;AAAA,yDAAQ,iBAAOC,cAAP,EAAuBC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACvB,8BAAMA,GAAN,CADuB;;AAAA;AAClCC,0BADkC;AAElCC,kCAFkC,GAErB,wCAAgBD,EAAhB,EAAoBF,cAApB,CAFqB;AAAA,yDAGjC;AACHE,kCADG;AAEHF,0DAFG;AAGHI,kCAAM,6BAAKD,UAAL,CAHH;AAIHE,sCAAU,iCAASF,UAAT,CAJP;AAKHG,kCAAM,6BAAKH,UAAL,CALH;AAMHI,qCAAS,gCAAQJ,UAAR,CANN;AAOHK,+EAPG;AAQHC,kEAAsCA,qCAAqCN,UAArC,CARnC;AASHO,kDAAsBA,qBAAqBP,UAArB;AATnB,yBAHiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,IAA7B;AAeP,IAAMM,uCAAuC,gBAAEV,KAAF,CAAQ,UAACI,UAAD,EAAaQ,IAAb,EAAsB;AACvE,QAAMC,QAAQ;AACVC,aAAK,EAAEC,KAAKH,KAAKI,EAAZ,EADK;AAEVC,aAAK,CACD,EAAEC,OAAON,KAAKM,KAAd,EADC,EAED,EAAEC,UAAUP,KAAKO,QAAjB,EAFC;AAFK,KAAd;AAOA,QAAMC,SAAS;AACXD,kBAAU,CADC;AAEXD,eAAO;AAFI,KAAf;AAIA,WAAOd,WACFG,IADE,CACGM,KADH,EACUO,MADV,EAEFC,OAFE,EAAP;AAGH,CAf4C,CAA7C;AAgBA,IAAMV,uBAAuB,gBAAEX,KAAF,CAAQ,UAACI,UAAD,EAAakB,eAAb,EAAiC;AAClE,QAAMT,QAAQ;AACVI,aAAK,CAAC,EAAEC,OAAOI,eAAT,EAAD,EACD,EAAEH,UAAUG,eAAZ,EADC;AADK,KAAd;AAIA,WAAOlB,WACFmB,OADE,CACMV,KADN,CAAP;AAEH,CAP4B,CAA7B;QAQSF,oB,GAAAA,oB;QAAsBD,oC,GAAAA,oC;AAC/B","file":"userRepository.js","sourcesContent":["import { find, getById, getByIds, getDb, getDbCollection, save } from '@alanmarcell/ptz-core-repository';\nimport R from 'ramda';\nexport const createUserRepository = R.curry(async (collectionName, url) => {\n    const db = await getDb(url);\n    const collection = getDbCollection(db, collectionName);\n    return {\n        db,\n        collectionName,\n        save: save(collection),\n        getByIds: getByIds(collection),\n        find: find(collection),\n        getById: getById(collection),\n        getDbCollection,\n        getOtherUsersWithSameUserNameOrEmail: getOtherUsersWithSameUserNameOrEmail(collection),\n        getByUserNameOrEmail: getByUserNameOrEmail(collection)\n    };\n});\nconst getOtherUsersWithSameUserNameOrEmail = R.curry((collection, user) => {\n    const query = {\n        _id: { $ne: user.id },\n        $or: [\n            { email: user.email },\n            { userName: user.userName }\n        ]\n    };\n    const select = {\n        userName: 1,\n        email: 1\n    };\n    return collection\n        .find(query, select)\n        .toArray();\n});\nconst getByUserNameOrEmail = R.curry((collection, userNameOrEmail) => {\n    const query = {\n        $or: [{ email: userNameOrEmail },\n            { userName: userNameOrEmail }]\n    };\n    return collection\n        .findOne(query);\n});\nexport { getByUserNameOrEmail, getOtherUsersWithSameUserNameOrEmail };\n//# sourceMappingURL=userRepository.js.map"]}