{"version":3,"sources":["../dist-esnext/userRepository.js"],"names":["createUserRepository","curry","collectionName","url","db","collection","save","getByIds","find","getById","getDbCollection","getOtherUsersWithSameUserNameOrEmail","getByUserNameOrEmail","user","query","_id","$ne","id","$or","email","userName","select","toArray","userNameOrEmail","findOne"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AACO,MAAMA,sDAAuB,gBAAEC,KAAF;AAAA,iCAAQ,WAAOC,cAAP,EAAuBC,GAAvB,EAA+B;AACvE,cAAMC,KAAK,MAAM,8BAAMD,GAAN,CAAjB;AACA,cAAME,aAAa,wCAAgBD,EAAhB,EAAoBF,cAApB,CAAnB;AACA,eAAO;AACHE,cADG;AAEHF,0BAFG;AAGHI,kBAAM,6BAAKD,UAAL,CAHH;AAIHE,sBAAU,iCAASF,UAAT,CAJP;AAKHG,kBAAM,6BAAKH,UAAL,CALH;AAMHI,qBAAS,gCAAQJ,UAAR,CANN;AAOHK,+DAPG;AAQHC,kDAAsCA,qCAAqCN,UAArC,CARnC;AASHO,kCAAsBA,qBAAqBP,UAArB;AATnB,SAAP;AAWH,KAdmC;;AAAA;AAAA;AAAA;AAAA,KAA7B;AAeP,MAAMM,uCAAuC,gBAAEV,KAAF,CAAQ,CAACI,UAAD,EAAaQ,IAAb,KAAsB;AACvE,UAAMC,QAAQ;AACVC,aAAK,EAAEC,KAAKH,KAAKI,EAAZ,EADK;AAEVC,aAAK,CACD,EAAEC,OAAON,KAAKM,KAAd,EADC,EAED,EAAEC,UAAUP,KAAKO,QAAjB,EAFC;AAFK,KAAd;AAOA,UAAMC,SAAS;AACXD,kBAAU,CADC;AAEXD,eAAO;AAFI,KAAf;AAIA,WAAOd,WACFG,IADE,CACGM,KADH,EACUO,MADV,EAEFC,OAFE,EAAP;AAGH,CAf4C,CAA7C;AAgBA,MAAMV,uBAAuB,gBAAEX,KAAF,CAAQ,CAACI,UAAD,EAAakB,eAAb,KAAiC;AAClE,UAAMT,QAAQ;AACVI,aAAK,CAAC,EAAEC,OAAOI,eAAT,EAAD,EACD,EAAEH,UAAUG,eAAZ,EADC;AADK,KAAd;AAIA,WAAOlB,WACFmB,OADE,CACMV,KADN,CAAP;AAEH,CAP4B,CAA7B;QAQSF,oB,GAAAA,oB;QAAsBD,oC,GAAAA,oC;AAC/B","file":"userRepository.js","sourcesContent":["import { find, getById, getByIds, getDb, getDbCollection, save } from 'ptz-core-repository';\r\nimport R from 'ramda';\r\nexport const createUserRepository = R.curry(async (collectionName, url) => {\r\n    const db = await getDb(url);\r\n    const collection = getDbCollection(db, collectionName);\r\n    return {\r\n        db,\r\n        collectionName,\r\n        save: save(collection),\r\n        getByIds: getByIds(collection),\r\n        find: find(collection),\r\n        getById: getById(collection),\r\n        getDbCollection,\r\n        getOtherUsersWithSameUserNameOrEmail: getOtherUsersWithSameUserNameOrEmail(collection),\r\n        getByUserNameOrEmail: getByUserNameOrEmail(collection)\r\n    };\r\n});\r\nconst getOtherUsersWithSameUserNameOrEmail = R.curry((collection, user) => {\r\n    const query = {\r\n        _id: { $ne: user.id },\r\n        $or: [\r\n            { email: user.email },\r\n            { userName: user.userName }\r\n        ]\r\n    };\r\n    const select = {\r\n        userName: 1,\r\n        email: 1\r\n    };\r\n    return collection\r\n        .find(query, select)\r\n        .toArray();\r\n});\r\nconst getByUserNameOrEmail = R.curry((collection, userNameOrEmail) => {\r\n    const query = {\r\n        $or: [{ email: userNameOrEmail },\r\n            { userName: userNameOrEmail }]\r\n    };\r\n    return collection\r\n        .findOne(query);\r\n});\r\nexport { getByUserNameOrEmail, getOtherUsersWithSameUserNameOrEmail };\r\n//# sourceMappingURL=userRepository.js.map"]}