{"version":3,"sources":["../dist-esnext/userRepository.test.js"],"names":["MONGO_URL","db","userRepository","describe","beforeEach","connect","Math","random","toString","replace","it","user","displayName","email","userName","save","getById","id","userDb","user2","getOtherUsersWithSameUserNameOrEmail","getByUserNameOrEmail"],"mappings":"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","file":"userRepository.test.js","sourcesContent":["import { MongoClient } from 'mongodb';\nimport { emptyArray, equal, notEqual, notOk, ok } from 'ptz-assert';\nimport { User } from 'ptz-user-domain';\nimport { UserRepository } from './index';\nconst MONGO_URL = 'mongodb://localhost:27017/test';\nvar db, userRepository;\ndescribe('UserRepository', () => {\n    beforeEach(async () => {\n        db = await MongoClient.connect(MONGO_URL + Math.random().toString().replace('.', ''));\n        userRepository = new UserRepository(db);\n    });\n    describe('save', () => {\n        it('insert', async () => {\n            const user = new User({\n                displayName: 'Angelo',\n                email: 'angeloocana@gmail.com',\n                userName: 'angeloocana'\n            });\n            await userRepository.save(user);\n            const userDb = await userRepository.getById(user.id);\n            ok(userDb);\n            equal(userDb.id, user.id);\n            equal(userDb.displayName, user.displayName);\n            equal(userDb.email, user.email);\n            equal(userDb.userName, user.userName);\n        });\n        it('update');\n    });\n    describe('getOtherUsersWithSameUserNameOrEmail', () => {\n        it('find by email', async () => {\n            const user = new User({\n                displayName: 'Angelo',\n                email: 'angeloocana@gmail.com',\n                userName: 'angeloocana'\n            });\n            const user2 = new User({\n                displayName: 'Angelo',\n                email: 'angeloocana@gmail.com',\n                userName: 'gsgdsgsd'\n            });\n            await userRepository.save(user);\n            const userDb = await userRepository.getOtherUsersWithSameUserNameOrEmail(user2);\n            equal(userDb[0].email, user2.email);\n            notEqual(userDb[0].id, user2.id);\n        });\n        it('find by userName', async () => {\n            const user = new User({\n                displayName: 'Angelo',\n                email: 'angeloocana@gmail.com',\n                userName: 'angeloocana'\n            });\n            const user2 = new User({\n                displayName: 'Angelo',\n                email: 'advadvdavad@gmail.com',\n                userName: 'angeloocana'\n            });\n            await userRepository.save(user);\n            const userDb = await userRepository.getOtherUsersWithSameUserNameOrEmail(user2);\n            equal(userDb[0].userName, user2.userName);\n            notEqual(userDb[0].id, user2.id);\n        });\n        it('not found', async () => {\n            const user = new User({\n                displayName: 'Angelo',\n                email: 'dgh3t4hd@gmail.com',\n                userName: 'dgh3t4hd'\n            });\n            const userDb = await userRepository.getOtherUsersWithSameUserNameOrEmail(user);\n            emptyArray(userDb);\n        });\n    });\n    describe('getByUserNameOrEmail', () => {\n        it('find by email', async () => {\n            const user = new User({\n                displayName: 'Angelo',\n                email: 'angeloocana@gmail.com',\n                userName: 'angeloocana'\n            });\n            await userRepository.save(user);\n            const userDb = await userRepository.getByUserNameOrEmail('angeloocana@gmail.com');\n            ok(userDb);\n            equal(userDb.id, user.id);\n            equal(userDb.displayName, user.displayName);\n            equal(userDb.email, user.email);\n            equal(userDb.userName, user.userName);\n        });\n        it('find by userName', async () => {\n            const user = new User({\n                displayName: 'Angelo',\n                email: 'angeloocana@gmail.com',\n                userName: 'angeloocana'\n            });\n            await userRepository.save(user);\n            const userDb = await userRepository.getByUserNameOrEmail('angeloocana');\n            ok(userDb);\n            equal(userDb.id, user.id);\n            equal(userDb.displayName, user.displayName);\n            equal(userDb.email, user.email);\n            equal(userDb.userName, user.userName);\n        });\n        it('not found', async () => {\n            const userDb = await userRepository.getByUserNameOrEmail('dgdsfsfbsf');\n            notOk(userDb);\n        });\n    });\n});\n//# sourceMappingURL=userRepository.test.js.map"]}