{"version":3,"sources":["../dist-esnext/userRepository.test.js"],"names":["Core","MONGO_URL","userRepository","describe","beforeEach","createUserRepository","it","user","id","displayName","email","userName","user2","save","getOtherUsersWithSameUserNameOrEmail","userDb","getByUserNameOrEmail"],"mappings":"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","file":"userRepository.test.js","sourcesContent":["import { emptyArray, equal, notEqual, notOk, ok } from 'ptz-assert';\nimport * as Core from './index';\nconst MONGO_URL = 'mongodb://localhost:27017/ptz-core-repo';\nvar userRepository;\ndescribe('UserRepository', () => {\n    beforeEach(async () => {\n        userRepository = await Core.createUserRepository('test-collection', MONGO_URL);\n    });\n    describe('getOtherUsersWithSameUserNameOrEmail', () => {\n        it('find by email', async () => {\n            const user = {\n                id: 'testid',\n                displayName: 'Angelo',\n                email: 'angeloocana@gmail.com',\n                userName: 'angeloocana'\n            };\n            const user2 = {\n                id: 'testid2',\n                displayName: 'Angelo',\n                email: 'angeloocana@gmail.com',\n                userName: 'gsgdsgsd'\n            };\n            await userRepository.save(user);\n            const userDb = await userRepository.getOtherUsersWithSameUserNameOrEmail(user2);\n            equal(userDb[0].email, user2.email);\n            notEqual(userDb[0].id, user2.id);\n        });\n        it('find by userName', async () => {\n            const user = {\n                id: 'testid',\n                displayName: 'Angelo',\n                email: 'angeloocana@gmail.com',\n                userName: 'angeloocana'\n            };\n            const user2 = {\n                id: 'testid2',\n                displayName: 'Angelo',\n                email: 'advadvdavad@gmail.com',\n                userName: 'angeloocana'\n            };\n            await userRepository.save(user);\n            const userDb = await userRepository.getOtherUsersWithSameUserNameOrEmail(user2);\n            equal(userDb[0].userName, user2.userName);\n            notEqual(userDb[0].id, user2.id);\n        });\n        it('not found', async () => {\n            const user = {\n                id: 'testid',\n                displayName: 'Angelo',\n                email: 'dgh3t4hd@gmail.com',\n                userName: 'dgh3t4hd'\n            };\n            const userDb = await userRepository.getOtherUsersWithSameUserNameOrEmail(user);\n            emptyArray(userDb);\n        });\n    });\n    describe('getByUserNameOrEmail', () => {\n        it('find by email', async () => {\n            const user = {\n                id: 'testid',\n                displayName: 'Angelo',\n                email: 'angeloocana@gmail.com',\n                userName: 'angeloocana'\n            };\n            await userRepository.save(user);\n            const userDb = await userRepository.getByUserNameOrEmail('angeloocana@gmail.com');\n            ok(userDb);\n            equal(userDb.id, user.id);\n            equal(userDb.displayName, user.displayName);\n            equal(userDb.email, user.email);\n            equal(userDb.userName, user.userName);\n        });\n        it('find by userName', async () => {\n            const user = {\n                id: 'testid',\n                displayName: 'Angelo',\n                email: 'angeloocana@gmail.com',\n                userName: 'angeloocana'\n            };\n            await userRepository.save(user);\n            const userDb = await userRepository.getByUserNameOrEmail('angeloocana');\n            ok(userDb);\n            equal(userDb.id, user.id);\n            equal(userDb.displayName, user.displayName);\n            equal(userDb.email, user.email);\n            equal(userDb.userName, user.userName);\n        });\n        it('not found', async () => {\n            const userDb = await userRepository.getByUserNameOrEmail('dgdsfsfbsf');\n            notOk(userDb);\n        });\n    });\n});\n//# sourceMappingURL=userRepository.test.js.map"]}