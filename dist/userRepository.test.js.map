{"version":3,"sources":["../dist-esnext/userRepository.test.js"],"names":["Core","MONGO_URL","userRepository","describe","beforeEach","createUserRepository","it","user","id","displayName","email","userName","user2","save","userDb","getOtherUsersWithSameUserNameOrEmail","getByUserNameOrEmail"],"mappings":"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","file":"userRepository.test.js","sourcesContent":["import { emptyArray, equal, notEqual, notOk, ok } from 'ptz-assert';\r\nimport * as Core from './index';\r\nconst MONGO_URL = 'mongodb://localhost:27017/ptz-core-repo';\r\nvar userRepository;\r\ndescribe('UserRepository', () => {\r\n    beforeEach(async () => {\r\n        userRepository = await Core.createUserRepository('test-collection', MONGO_URL);\r\n    });\r\n    describe('getOtherUsersWithSameUserNameOrEmail', () => {\r\n        it('find by email', async () => {\r\n            const user = {\r\n                id: 'testid',\r\n                displayName: 'Angelo',\r\n                email: 'angeloocana@gmail.com',\r\n                userName: 'angeloocana'\r\n            };\r\n            const user2 = {\r\n                id: 'testid2',\r\n                displayName: 'Angelo',\r\n                email: 'angeloocana@gmail.com',\r\n                userName: 'gsgdsgsd'\r\n            };\r\n            await userRepository.save(user);\r\n            const userDb = await userRepository.getOtherUsersWithSameUserNameOrEmail(user2);\r\n            equal(userDb[0].email, user2.email);\r\n            notEqual(userDb[0].id, user2.id);\r\n        });\r\n        it('find by userName', async () => {\r\n            const user = {\r\n                id: 'testid',\r\n                displayName: 'Angelo',\r\n                email: 'angeloocana@gmail.com',\r\n                userName: 'angeloocana'\r\n            };\r\n            const user2 = {\r\n                id: 'testid2',\r\n                displayName: 'Angelo',\r\n                email: 'advadvdavad@gmail.com',\r\n                userName: 'angeloocana'\r\n            };\r\n            await userRepository.save(user);\r\n            const userDb = await userRepository.getOtherUsersWithSameUserNameOrEmail(user2);\r\n            equal(userDb[0].userName, user2.userName);\r\n            notEqual(userDb[0].id, user2.id);\r\n        });\r\n        it('not found', async () => {\r\n            const user = {\r\n                id: 'testid',\r\n                displayName: 'Angelo',\r\n                email: 'dgh3t4hd@gmail.com',\r\n                userName: 'dgh3t4hd'\r\n            };\r\n            const userDb = await userRepository.getOtherUsersWithSameUserNameOrEmail(user);\r\n            emptyArray(userDb);\r\n        });\r\n    });\r\n    describe('getByUserNameOrEmail', () => {\r\n        it('find by email', async () => {\r\n            const user = {\r\n                id: 'testid',\r\n                displayName: 'Angelo',\r\n                email: 'angeloocana@gmail.com',\r\n                userName: 'angeloocana'\r\n            };\r\n            await userRepository.save(user);\r\n            const userDb = await userRepository.getByUserNameOrEmail('angeloocana@gmail.com');\r\n            ok(userDb);\r\n            equal(userDb.id, user.id);\r\n            equal(userDb.displayName, user.displayName);\r\n            equal(userDb.email, user.email);\r\n            equal(userDb.userName, user.userName);\r\n        });\r\n        it('find by userName', async () => {\r\n            const user = {\r\n                id: 'testid',\r\n                displayName: 'Angelo',\r\n                email: 'angeloocana@gmail.com',\r\n                userName: 'angeloocana'\r\n            };\r\n            await userRepository.save(user);\r\n            const userDb = await userRepository.getByUserNameOrEmail('angeloocana');\r\n            ok(userDb);\r\n            equal(userDb.id, user.id);\r\n            equal(userDb.displayName, user.displayName);\r\n            equal(userDb.email, user.email);\r\n            equal(userDb.userName, user.userName);\r\n        });\r\n        it('not found', async () => {\r\n            const userDb = await userRepository.getByUserNameOrEmail('dgdsfsfbsf');\r\n            notOk(userDb);\r\n        });\r\n    });\r\n});\r\n//# sourceMappingURL=userRepository.test.js.map"]}